# -*- coding: utf-8 -*-
"""The PCA Project

Automatically generated by Colaboratory.

"""

import pandas as pd
import numpy as np
from sklearn.decomposition import PCA
from sklearn import preprocessing
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split 
from sklearn.metrics import confusion_matrix

input_file = 'http://bit.ly/2O7Islk'
df = pd.read_csv(input_file, header=None, sep=',')
y = df[57]
X = df.iloc[:,:-1]

df.shape

X = preprocessing.MinMaxScaler(feature_range=(0,1)).\
                   fit_transform(X)

type(X)

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, random_state=11)
print (X_train.shape, X_test.shape)

num_comp = 15
pca = PCA (n_components=num_comp, random_state=1)
pca.fit(X_train)

pca.components_.shape

pca.explained_variance_

np.cumsum(pca.explained_variance_ratio_)

X_pca_train = pca.transform (X_train) 
X_pca_test = pca.transform (X_test)

logit = LogisticRegression( max_iter=2000)

logit.fit(X_pca_train, y_train)

y_pred = logit.predict(X_pca_test)
confusion_matrix(y_test, y_pred)

"""### Unionize the spambase to inflate the number of rows"""

X_y = preprocessing.MinMaxScaler(feature_range=(0,1)).\
                   fit_transform(df)

type(X_y)

vstack_len = 217 #1_000_000 // X_y.shape[0]; vstack_len

X_y.shape

all = tuple([X_y for x in range(vstack_len) ]);

union_X_y = np.vstack(all)
union_X_y.shape

y = union_X_y[:,57]
X = union_X_y[:,:-1]

X.shape, y.shape

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, random_state=11)
print (X_train.shape, X_test.shape)

num_comp = 15
pca = PCA (n_components=num_comp, random_state=1)

pca.fit(X_train) 

print(pca.components_.shape)
print(np.cumsum(pca.explained_variance_ratio_))

X_pca_train = pca.transform (X_train)

X_pca_test = pca.transform (X_test)

logit = LogisticRegression( max_iter=2000)
logit_pca = LogisticRegression( max_iter=2000)

logit.fit(X_train, y_train)

logit_pca.fit(X_pca_train, y_train)

y_pred = logit.predict(X_test)
y_pred_pca = logit_pca.predict(X_pca_test)

print(confusion_matrix(y_test, y_pred) // vstack_len) 
print(confusion_matrix(y_test, y_pred_pca) // vstack_len)

print(logit.score(X_test, y_test)) 
print(logit_pca.score(X_pca_test, y_test) )


