# -*- coding: utf-8 -*-
"""Logistic Regression Lab

Automatically generated by Colaboratory.

"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt  
import seaborn as sns
from sklearn.linear_model import LogisticRegression
from sklearn.datasets import make_blobs
from sklearn.preprocessing import scale
from sklearn.preprocessing import minmax_scale
from sklearn.model_selection import train_test_split 
from sklearn.datasets import load_svmlight_file
from sklearn.metrics import confusion_matrix
import numpy as np
import pandas as pd
import urllib.request as webreq
import os
import pickle

url = 'https://bit.ly/3xKMqFc'
local_file = 'input.libsvm.dat'

webreq.urlretrieve(url, local_file)



X, y = load_svmlight_file(local_file)

type(X), type(y)

X.shape, y.shape

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 1)

logit1 = LogisticRegression()
logit2 = LogisticRegression(C=0.1) 
logit3 = LogisticRegression(C=5) 
logit1, logit2, logit3

logit1.fit(X_train, y_train)
logit2.fit(X_train, y_train)
logit3.fit(X_train, y_train)

y_pred1 = logit1.predict(X_test)
y_pred2 = logit2.predict(X_test)
y_pred3 = logit3.predict(X_test)

logit1.score(X_train, y_train), logit1.score(X_test, y_test), logit2.score(X_train, y_train), logit2.score(X_test, y_test), logit3.score(X_train, y_train), logit3.score(X_test, y_test)

X_test[:5].toarray()

y_test[:5]

prob = logit1.predict_proba(X_test[:5]); prob

[0 if x[0]> x[1] else 1 for x in prob]

y_pred1[:5]

print (confusion_matrix(y_test, y_pred1))
print (confusion_matrix(y_test, y_pred2))
print (confusion_matrix(y_test, y_pred3))

"""## Visualializing the Logit Decision Boundary"""

lof1 = logit1.coef_; 
lof2 = logit2.coef_; 
lof3 = logit3.coef_; 
lof1, lof2, lof3

logit1.coef_[:,0][0], logit1.coef_[:,1][0]

X[:4], y[:3]

XX = X.toarray(); XX[:3]

yy = y.astype(int)

sns.set()
plt.figure(figsize=(12,10))

sns.scatterplot (x = XX[:,0],y = XX[:,1], hue =  yy, label = 'Class Labels')

for i in range(len(y)):
  plt.annotate(i, (XX[i,0],XX[i,1]))

plt.plot(XX[:,0], XX[:,0] * lof1[0,0] + lof1[0,1], c = 'red' )
plt.plot(XX[:,0], XX[:,0] * lof2[0,0] + lof2[0,1], c = 'green' )
plt.plot(XX[:,0], XX[:,0] * lof3[0,0] + lof3[0,1], c = 'blue' )

x_coor = 70
plt.text (x_coor, x_coor * lof1[0,0] + lof1[0,1], s = "C=1.0", fontsize = 14, bbox=dict(facecolor='white', alpha=0.8))
plt.text (x_coor, x_coor * lof2[0,0] + lof2[0,1], s = "C=0.1",  fontsize = 14, bbox=dict(facecolor='white', alpha=0.8))
plt.text (x_coor, x_coor * lof3[0,0] + lof3[0,1], s = "C=5.0",  fontsize = 14, bbox=dict(facecolor='white', alpha=0.8))



plt.legend(loc='upper right')
plt.show()

"""# Serializing and Deserializing the Model



"""

model_ser_file = "./logit_model.ser"
with open (model_ser_file, "wb") as fout:
  pickle.dump(logit3, fout)

import os
for f in os.scandir():
  if f.name in model_ser_file:
    print (f.name, f.stat().st_size)

logit_deser = None
with open (model_ser_file, "rb") as fin:
  logit_deser = pickle.load(fin)

logit_deser

y_pred3 = logit_deser.predict(X_test)
confusion_matrix(y_test, y_pred3)

